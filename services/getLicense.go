package services

import (
	"bytes"
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"errors"
	"io"
	"log"
	"net/http"

	"com.jtworld.wvproxy/constant"
	"com.jtworld.wvproxy/model"
	"com.jtworld.wvproxy/util"
)

func buildRequestMessage(rowRequest []byte) ([]byte, error) {
	var message model.RequestMessage
	message.Payload = base64.StdEncoding.EncodeToString(rowRequest)
	log.Println("rowRequest", message.Payload)
	message.ContentId = "2015_tears"
	message.Provider = constant.PROVIDER
	message.AllowedTrackTypes = constant.ALLOWED_TRACK_TYPES

	request, err := json.Marshal(message)
	if err != nil {
		return nil, err
	}
	return request, nil
}

func buildLicenseRequest(rowRequest []byte) (*model.LicenseRequest, error) {
	request, err := buildRequestMessage(rowRequest)
	if err != nil {
		return nil, err
	}

	key, _ := hex.DecodeString(constant.SIGN_KEY)
	iv, _ := hex.DecodeString(constant.SIGN_IV)

	licenseRequest := model.LicenseRequest{
		Request:   base64.StdEncoding.EncodeToString(request),
		Signature: util.GenerateSignature(key, iv, request),
		Signer:    constant.PROVIDER,
	}

	return &licenseRequest, nil
}

func getLicenseResponse(licenseRequest *model.LicenseRequest) ([]byte, error) {
	request, err := json.Marshal(licenseRequest)
	if err != nil {
		return nil, err
	}

	log.Println(string(request))

	req, _ := http.NewRequest("POST", constant.LAURL, bytes.NewBuffer(request))
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	log.Println("response status code: ", resp.Status)

	result, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	return result, nil
}

func GetLicense(rowRequest []byte) (string, error) {
	licenseRequest, err := buildLicenseRequest(rowRequest)
	if err != nil {
		log.Println("error building license request.", err)
		return "", err
	}

	var licenseResponse map[string]interface{}

	resp, err := getLicenseResponse(licenseRequest)
	if err != nil {
		log.Println("error receiving license response.", err)
		return "", err
	}

	if err := json.Unmarshal(resp, &licenseResponse); err != nil {
		log.Println("error unmarshaling response", err)
		return "", err
	}

	licenseStatus := licenseResponse["status"].(string)
	log.Printf("status: %s\n", licenseStatus)
	if licenseStatus == "OK" {
		log.Println("headers", licenseStatus)
		license := licenseResponse["license"].(string)
		log.Println("license", license)

		licenseDecode, _ := base64.StdEncoding.DecodeString(license)
		return string(licenseDecode), nil
	}

	return "", errors.New("invalid status")
}

// {"request":"eyJwYXlsb2FkIjoiQ0FFU3FBOEt4dzRJQVJLQkNnckJBZ2dDRWlCempOaUY0YjJaNzRtY1RMR2lBcm5uOWRhUmJvNkFib1dGcDRKazFSeUdBUmloN3QrdkJpS09BakNDQVFvQ2dnRUJBTHA2endSMlBqYzZJN2RFZ3VEZTdITmlXSnJIL25KMzNxNW5zQ1ZvNHFKV1c5ZEhmWjRsNThSblU1OUMycE1DRWVEakpxNkVvdWdQQnFWalI0ZVcwUHc3Q1FYaXpkRXh4RUNNT29OWWVhNXlLZUIyV0ZaNElVcTduOGdiS1BrNXArUHZSby9aa3JvU1BhTDdvZlFGb0xrNnQ2OWFrZFU0VFpBMnVUOXZpNW0vSGZBZDVtS2d0MkZESDN5cFNxT2R6eHIyWUYweGVESUZKY0NrQTN6NzBENkJzL24yZG5QVHNPdVlOK2RLM0dFdGYzK1d5K3YxNktoKzM4TUNyNnVNVGpTbFg4VndCZ0QzeXNlK1VSdUFvL2Q3ZVZReUlndkFxM2lnK1NlUjRoc2R3UVVrSURnd2Q3RWpNR2FpZ1RWTmNsUVNHQjhmWUNtK2dHNzBBNDBEZlhFQ0F3RUFBU2pDc0FGSUFSS0FBbXdyNmErZVZKREZNUDYrZXlldVVRWjV4QWd1OFpRUVBGelhMN2NQZk5hNHBGdGRBNDZyd2hrYWcreElubzNmVnVtTzZBTHlNbWpwNlBVaUh3MUZSai9wR2cybHFkbElMOXFxNmZ1QWJVYjMyaXNINXF4ekhsdXM5THdrd2QwdEZ0cXpqSVU2MXdxcXhQcjROeUNJVkgzbUpMeDNwK3BJSnJhd0taUEp2UlR1Z2RLc0xGMDVFem5RbDQyMldSK09Yd3AzNEJhTEVXVnJOSXJOd25ZRlkrcnJmUjI0M29lekM2UzdKNkdYR3FZMWxaT21lNjhheWFveTRuS29FVE8yQWtIRWNQOTRERzRxdmVSbVY0SmErT0Rzd0tleDg1NmNKbU9RemFFR1UyVzVtc0c1MDlDQXRDYmFPYit5bmY4UzE5amZaMWIwbXVXUmZ1OHFKdmFEdjFJYXR3VUtzUUlJQVJJUS9aR29aTDc2WDVURXBLTy9vY282UEJqdzVlMkVCaUtPQWpDQ0FRb0NnZ0VCQUpJaHFkaUZlZ1Y4Z25pODdpWG83cVloZkJpMTdkbHZmaTRmMDlldUhScjhlSFRST3dTV05uYnhPYUxrcURVUlA5Mno1dG1kcmxrNVIwTVBFRDU0TGZpaWQrRXl6ekhyOU0yWS8yRjFVY3RtenBoVENjSUp1OXZ3a1lJazJkNHJKcVlscG82Y2Z2VE1FQVl1SWFmcEV5d3ZDWlNZNC9sck5aRVZxemxNSDFqZGhybFFiMURMUm9jKzIvZXQ3VVZWRDJ1ZUw2TEQ2bzhVOHRSTDU1aHFoejZtZDlhd2JlZ2JlVjlERm5nL1dXWU1rdzNxVmZwL1RaRlBadWtxN1E2L29Rd2JEUUt5d0pKTkxPTnp0algrSERiZDNCOTRPaG1lYnFxT2h1NmlFL3h1bG80Q0JoRFhoRzJaUXQ2ZlpYVnpCcG5VREFCSnlGV2d3SVE1UlhzYVNtc0NBd0VBQVNqQ3NBRklBUktBQXdSRkdHcVRkczRDb2dUbm1zNmJpVmdnMkdkUElOL2NjWjlUQnZnVklORXg2SGNwVi85aW1KNytIL09tQ1F5SGpHWXlwdU5acXpMVEZlZHhSb1doV1E2MGZMSWh1SWlBbXhVYThFV2pTNVRWaU9UVURTbzhpeStjVEFIUXAzL21vc21LNXdEclo5b3lnTkx5M3JtZDVnK0NndWpmZ3pGdm9ZKzR0a3hhVmZJZnM4WUViUS8wYUl4WHZCUGVWQk85WURsUldpYUpueFZhaDFNUHVYZ1psTjZ2ck5mSnAvUXdWemlkL3ZrQThHNzAzcC9icitTekZqa2JzYW9Jb1ZIYXdJLzZTRk5FRDl3NTFxV3g4b0F0TEhhdGRnb2t5TzM1VjVXV1VSS0huK2V6SmlxYzhxUjhYT0thaUJIczRuUnB0NmhvRVl4N1VFVDRrZGQxcVZpZnpQWkpESVhnMHFoTzQ3S1VHVDdvSkx2S2FXS0RnYURjbEplN3AzUVBQVDdzeDh4aDdNejZ1RmhtaDZTMi9tRmpoRnB6cnRmNXVuNVRQbnUzZy83TWZEaFpXbTNzMUMwTDJleDQwbGdhOE5yVkE4bUFsbGNrNVhBTUI4Zk0vMGJKdUQ3cGVlYzk3MUk0Wm5FRlI2OFk2ZlE5UWY0S2NINTJmclh2NDFWcndHL2JYUm90Q2hCaGNIQnNhV05oZEdsdmJsOXVZVzFsRWhsaGJtUnliMmxrZUM1dFpXUnBZVE11WkdWdGJ5NXRZV2x1R2dvS0JtOXlhV2RwYmhJQUdrNEtIbkJoWTJ0aFoyVmZZMlZ5ZEdsbWFXTmhkR1ZmYUdGemFGOWllWFJsY3hJc1QyaElZVGgxVm5aWWJpOUdWVlZ2WlV0WmMwUkdUWFk0ZFcxUU9WVlFabmRNY2xBNFVHcG5ObU5yU1QwYUZnb01ZMjl0Y0dGdWVWOXVZVzFsRWdaSGIyOW5iR1VhSUFvS2JXOWtaV3hmYm1GdFpSSVNjMlJyWDJkd2FHOXVaVFkwWDJGeWJUWTBHaDRLRVdGeVkyaHBkR1ZqZEhWeVpWOXVZVzFsRWdsaGNtMDJOQzEyT0dFYUh3b0xaR1YyYVdObFgyNWhiV1VTRUdWdGRXeGhkRzl5TmpSZllYSnROalFhSWdvTWNISnZaSFZqZEY5dVlXMWxFaEp6Wkd0ZlozQm9iMjVsTmpSZllYSnROalFhWndvS1luVnBiR1JmYVc1bWJ4SlpaMjl2WjJ4bEwzTmthMTluY0dodmJtVTJORjloY20wMk5DOWxiWFZzWVhSdmNqWTBYMkZ5YlRZME9qRXlMMU5GTVVJdU1qUXdNVEl5TGpBd05TOHhNVFF4T0RjNE5qcDFjMlZ5WkdWaWRXY3ZaR1YyTFd0bGVYTWFIZ29VZDJsa1pYWnBibVZmWTJSdFgzWmxjbk5wYjI0U0JqRTJMakV1TUJva0NoOXZaVzFmWTNKNWNIUnZYM05sWTNWeWFYUjVYM0JoZEdOb1gyeGxkbVZzRWdFd0dsQUtIRzlsYlY5amNubHdkRzlmWW5WcGJHUmZhVzVtYjNKdFlYUnBiMjRTTUU5RlRVTnllWEIwYnlCTVpYWmxiRE1nUTI5a1pTQXlNalU1TkNCTllYa2dNamdnTWpBeU1TQXhOam8xT1Rvd056SVVDQUVRQVNBQUtCQXdBRUFBU0FCUUFWZ0FZQUVTVEFwS0NpUUlBUklCTlJvTmQybGtaWFpwYm1WZmRHVnpkQ0lLTWpBeE5WOTBaV0Z5Y3lvQ1UwUVFBUm9nUmtKQ1JrUXhOVFpFUkVaRVFVTkVPRFEzTURBd01EQXdNREF3TURBd01EQVlBU0NWbGVxdkJqQVZPUHVtKy9NSUdvQUNPUSt6Wkw4L0pqQnY5bHh5K0JVUVBtakMraUNHMEE0THdndWg2cDMvRHZtM0VsSEEycGJqZy9STWlDMGw5NCtrM1ZuLytiWHNzUGdzM1FDSFBJRXhUVEJwMnVTdUhqL1VCb2RnUEs3cHJkVFdGMG9Da2xiN05ra2VwTVJnNHQrWG5FQVBkSmw1RC8zSldTd2lJNko5RUtDdHFmNS83R0l2bFRuMEZmcm8rQVNYYmZNYU4yRjJTL3YrUUFOWW1hd3RHZW1CSGlaM3dzRzVCWFhHcXZWSFh6a0FSTXd5Z2JxNWZpazUrUnZGbm05cGY5S3BJdWlXSGtCZjQ0c0RQQVRhZUdJTEY0b2Ewd0JiTVpLM1BTRW16RTRpR2JmOFR5aTBQODBnVlI4Sk81VE5Kbk5LTHY5UkM4b3dMcEwvU3orRUM0REppMnZNODdCaXR4YTJtT1BSWDBvVUFBQUFBUUFBQUJRQUJBQVFqbjdUZXdBQUFBQT0iLCJDb250ZW50SWQiOiIiLCJwcm92aWRlciI6IndpZGV2aW5lX3Rlc3QiLCJBbGxvd2VkVHJhY2tUeXBlcyI6IlNEX0hEIiwiUG9saWN5T3ZlcnJpZGUiOnt9fQ==","signature":"PII8hp2aa1/Rz54j6B9yflA9tfHuBbRovgM0L7aIEN0=","signer":"widevine_test"}
// {"request":"eyJwYXlsb2FkIjoiQ0FFU3FBOEt4dzRJQVJLQkNnckJBZ2dDRWlCempOaUY0YjJaNzRtY1RMR2lBcm5uOWRhUmJvNkFib1dGcDRKazFSeUdBUmloN3QrdkJpS09BakNDQVFvQ2dnRUJBTHA2endSMlBqYzZJN2RFZ3VEZTdITmlXSnJIL25KMzNxNW5zQ1ZvNHFKV1c5ZEhmWjRsNThSblU1OUMycE1DRWVEakpxNkVvdWdQQnFWalI0ZVcwUHc3Q1FYaXpkRXh4RUNNT29OWWVhNXlLZUIyV0ZaNElVcTduOGdiS1BrNXArUHZSby9aa3JvU1BhTDdvZlFGb0xrNnQ2OWFrZFU0VFpBMnVUOXZpNW0vSGZBZDVtS2d0MkZESDN5cFNxT2R6eHIyWUYweGVESUZKY0NrQTN6NzBENkJzL24yZG5QVHNPdVlOK2RLM0dFdGYzK1d5K3YxNktoKzM4TUNyNnVNVGpTbFg4VndCZ0QzeXNlK1VSdUFvL2Q3ZVZReUlndkFxM2lnK1NlUjRoc2R3UVVrSURnd2Q3RWpNR2FpZ1RWTmNsUVNHQjhmWUNtK2dHNzBBNDBEZlhFQ0F3RUFBU2pDc0FGSUFSS0FBbXdyNmErZVZKREZNUDYrZXlldVVRWjV4QWd1OFpRUVBGelhMN2NQZk5hNHBGdGRBNDZyd2hrYWcreElubzNmVnVtTzZBTHlNbWpwNlBVaUh3MUZSai9wR2cybHFkbElMOXFxNmZ1QWJVYjMyaXNINXF4ekhsdXM5THdrd2QwdEZ0cXpqSVU2MXdxcXhQcjROeUNJVkgzbUpMeDNwK3BJSnJhd0taUEp2UlR1Z2RLc0xGMDVFem5RbDQyMldSK09Yd3AzNEJhTEVXVnJOSXJOd25ZRlkrcnJmUjI0M29lekM2UzdKNkdYR3FZMWxaT21lNjhheWFveTRuS29FVE8yQWtIRWNQOTRERzRxdmVSbVY0SmErT0Rzd0tleDg1NmNKbU9RemFFR1UyVzVtc0c1MDlDQXRDYmFPYit5bmY4UzE5amZaMWIwbXVXUmZ1OHFKdmFEdjFJYXR3VUtzUUlJQVJJUS9aR29aTDc2WDVURXBLTy9vY282UEJqdzVlMkVCaUtPQWpDQ0FRb0NnZ0VCQUpJaHFkaUZlZ1Y4Z25pODdpWG83cVloZkJpMTdkbHZmaTRmMDlldUhScjhlSFRST3dTV05uYnhPYUxrcURVUlA5Mno1dG1kcmxrNVIwTVBFRDU0TGZpaWQrRXl6ekhyOU0yWS8yRjFVY3RtenBoVENjSUp1OXZ3a1lJazJkNHJKcVlscG82Y2Z2VE1FQVl1SWFmcEV5d3ZDWlNZNC9sck5aRVZxemxNSDFqZGhybFFiMURMUm9jKzIvZXQ3VVZWRDJ1ZUw2TEQ2bzhVOHRSTDU1aHFoejZtZDlhd2JlZ2JlVjlERm5nL1dXWU1rdzNxVmZwL1RaRlBadWtxN1E2L29Rd2JEUUt5d0pKTkxPTnp0algrSERiZDNCOTRPaG1lYnFxT2h1NmlFL3h1bG80Q0JoRFhoRzJaUXQ2ZlpYVnpCcG5VREFCSnlGV2d3SVE1UlhzYVNtc0NBd0VBQVNqQ3NBRklBUktBQXdSRkdHcVRkczRDb2dUbm1zNmJpVmdnMkdkUElOL2NjWjlUQnZnVklORXg2SGNwVi85aW1KNytIL09tQ1F5SGpHWXlwdU5acXpMVEZlZHhSb1doV1E2MGZMSWh1SWlBbXhVYThFV2pTNVRWaU9UVURTbzhpeStjVEFIUXAzL21vc21LNXdEclo5b3lnTkx5M3JtZDVnK0NndWpmZ3pGdm9ZKzR0a3hhVmZJZnM4WUViUS8wYUl4WHZCUGVWQk85WURsUldpYUpueFZhaDFNUHVYZ1psTjZ2ck5mSnAvUXdWemlkL3ZrQThHNzAzcC9icitTekZqa2JzYW9Jb1ZIYXdJLzZTRk5FRDl3NTFxV3g4b0F0TEhhdGRnb2t5TzM1VjVXV1VSS0huK2V6SmlxYzhxUjhYT0thaUJIczRuUnB0NmhvRVl4N1VFVDRrZGQxcVZpZnpQWkpESVhnMHFoTzQ3S1VHVDdvSkx2S2FXS0RnYURjbEplN3AzUVBQVDdzeDh4aDdNejZ1RmhtaDZTMi9tRmpoRnB6cnRmNXVuNVRQbnUzZy83TWZEaFpXbTNzMUMwTDJleDQwbGdhOE5yVkE4bUFsbGNrNVhBTUI4Zk0vMGJKdUQ3cGVlYzk3MUk0Wm5FRlI2OFk2ZlE5UWY0S2NINTJmclh2NDFWcndHL2JYUm90Q2hCaGNIQnNhV05oZEdsdmJsOXVZVzFsRWhsaGJtUnliMmxrZUM1dFpXUnBZVE11WkdWdGJ5NXRZV2x1R2dvS0JtOXlhV2RwYmhJQUdrNEtIbkJoWTJ0aFoyVmZZMlZ5ZEdsbWFXTmhkR1ZmYUdGemFGOWllWFJsY3hJc1QyaElZVGgxVm5aWWJpOUdWVlZ2WlV0WmMwUkdUWFk0ZFcxUU9WVlFabmRNY2xBNFVHcG5ObU5yU1QwYUZnb01ZMjl0Y0dGdWVWOXVZVzFsRWdaSGIyOW5iR1VhSUFvS2JXOWtaV3hmYm1GdFpSSVNjMlJyWDJkd2FHOXVaVFkwWDJGeWJUWTBHaDRLRVdGeVkyaHBkR1ZqZEhWeVpWOXVZVzFsRWdsaGNtMDJOQzEyT0dFYUh3b0xaR1YyYVdObFgyNWhiV1VTRUdWdGRXeGhkRzl5TmpSZllYSnROalFhSWdvTWNISnZaSFZqZEY5dVlXMWxFaEp6Wkd0ZlozQm9iMjVsTmpSZllYSnROalFhWndvS1luVnBiR1JmYVc1bWJ4SlpaMjl2WjJ4bEwzTmthMTluY0dodmJtVTJORjloY20wMk5DOWxiWFZzWVhSdmNqWTBYMkZ5YlRZME9qRXlMMU5GTVVJdU1qUXdNVEl5TGpBd05TOHhNVFF4T0RjNE5qcDFjMlZ5WkdWaWRXY3ZaR1YyTFd0bGVYTWFIZ29VZDJsa1pYWnBibVZmWTJSdFgzWmxjbk5wYjI0U0JqRTJMakV1TUJva0NoOXZaVzFmWTNKNWNIUnZYM05sWTNWeWFYUjVYM0JoZEdOb1gyeGxkbVZzRWdFd0dsQUtIRzlsYlY5amNubHdkRzlmWW5WcGJHUmZhVzVtYjNKdFlYUnBiMjRTTUU5RlRVTnllWEIwYnlCTVpYWmxiRE1nUTI5a1pTQXlNalU1TkNCTllYa2dNamdnTWpBeU1TQXhOam8xT1Rvd056SVVDQUVRQVNBQUtCQXdBRUFBU0FCUUFWZ0FZQUVTVEFwS0NpUUlBUklCTlJvTmQybGtaWFpwYm1WZmRHVnpkQ0lLTWpBeE5WOTBaV0Z5Y3lvQ1UwUVFBUm9nTWpBeVFUVTJSVEExTlVFNU1VTkJRelJDTURBd01EQXdNREF3TURBd01EQVlBU0RJbCtxdkJqQVZPTk9UcWNVSkdvQUNjdDNFanRJazZweWdJdGF6eXYzY2c1UVA5ODhOQTJkNmZvbkVzd1orUGxVZGtmQTE5a0dCQ05DNmZvSnN2VlFwbnovVWJlR3RpeFB4dUJMaHVkSlBZelBVbmdaQkFnMDdBenpLSVhJUCtyM2x1SDg1L0taQkYrR0k5cmNaZGF0a01NWXhaTjhnR3l1VkVxVTdQQ3pwanMrMTdGclZBajBlQml3M3B3NGYrTzQvSzhVaTEySjllVUFDazN2eVlSTi9MaThreEo1QWJXc3NIcGVWWXZsd1hxa2c0cVBOQ2Y3VURhZnhxb0JlbkdJakxYMWdKTUFkeUJNckhjcVFKUTRwVXdUZmpxUG54M2JXZkNoSzJScDhhRUw2ZE5SRnZuTXZJVkx0aXlpVnJMb0dyUk94bzBmZTZOR2lqVzlmSzR5bUdDY09VZC9WU29kVXVLTEJLem1Pd0VvVUFBQUFBUUFBQUJRQUJBQVFtS3BKMHdBQUFBQT0iLCJjb250ZW50X2lkIjoiIiwicHJvdmlkZXIiOiJ3aWRldmluZV90ZXN0IiwiYWxsb3dlZF90cmFja190eXBlcyI6IlNEX0hEIn0=","signature":"7EL5F+orTJ+VBVVpTrhRV8NupJHQWYsfjYQ1TMEUhXY=","signer":"widevine_test"}
// {"request":"eyJwYXlsb2FkIjoiQ0FFU3FBOEt4dzRJQVJLQkNnckJBZ2dDRWlCempOaUY0YjJaNzRtY1RMR2lBcm5uOWRhUmJvNkFib1dGcDRKazFSeUdBUmloN3QrdkJpS09BakNDQVFvQ2dnRUJBTHA2endSMlBqYzZJN2RFZ3VEZTdITmlXSnJIL25KMzNxNW5zQ1ZvNHFKV1c5ZEhmWjRsNThSblU1OUMycE1DRWVEakpxNkVvdWdQQnFWalI0ZVcwUHc3Q1FYaXpkRXh4RUNNT29OWWVhNXlLZUIyV0ZaNElVcTduOGdiS1BrNXArUHZSby9aa3JvU1BhTDdvZlFGb0xrNnQ2OWFrZFU0VFpBMnVUOXZpNW0vSGZBZDVtS2d0MkZESDN5cFNxT2R6eHIyWUYweGVESUZKY0NrQTN6NzBENkJzL24yZG5QVHNPdVlOK2RLM0dFdGYzK1d5K3YxNktoKzM4TUNyNnVNVGpTbFg4VndCZ0QzeXNlK1VSdUFvL2Q3ZVZReUlndkFxM2lnK1NlUjRoc2R3UVVrSURnd2Q3RWpNR2FpZ1RWTmNsUVNHQjhmWUNtK2dHNzBBNDBEZlhFQ0F3RUFBU2pDc0FGSUFSS0FBbXdyNmErZVZKREZNUDYrZXlldVVRWjV4QWd1OFpRUVBGelhMN2NQZk5hNHBGdGRBNDZyd2hrYWcreElubzNmVnVtTzZBTHlNbWpwNlBVaUh3MUZSai9wR2cybHFkbElMOXFxNmZ1QWJVYjMyaXNINXF4ekhsdXM5THdrd2QwdEZ0cXpqSVU2MXdxcXhQcjROeUNJVkgzbUpMeDNwK3BJSnJhd0taUEp2UlR1Z2RLc0xGMDVFem5RbDQyMldSK09Yd3AzNEJhTEVXVnJOSXJOd25ZRlkrcnJmUjI0M29lekM2UzdKNkdYR3FZMWxaT21lNjhheWFveTRuS29FVE8yQWtIRWNQOTRERzRxdmVSbVY0SmErT0Rzd0tleDg1NmNKbU9RemFFR1UyVzVtc0c1MDlDQXRDYmFPYit5bmY4UzE5amZaMWIwbXVXUmZ1OHFKdmFEdjFJYXR3VUtzUUlJQVJJUS9aR29aTDc2WDVURXBLTy9vY282UEJqdzVlMkVCaUtPQWpDQ0FRb0NnZ0VCQUpJaHFkaUZlZ1Y4Z25pODdpWG83cVloZkJpMTdkbHZmaTRmMDlldUhScjhlSFRST3dTV05uYnhPYUxrcURVUlA5Mno1dG1kcmxrNVIwTVBFRDU0TGZpaWQrRXl6ekhyOU0yWS8yRjFVY3RtenBoVENjSUp1OXZ3a1lJazJkNHJKcVlscG82Y2Z2VE1FQVl1SWFmcEV5d3ZDWlNZNC9sck5aRVZxemxNSDFqZGhybFFiMURMUm9jKzIvZXQ3VVZWRDJ1ZUw2TEQ2bzhVOHRSTDU1aHFoejZtZDlhd2JlZ2JlVjlERm5nL1dXWU1rdzNxVmZwL1RaRlBadWtxN1E2L29Rd2JEUUt5d0pKTkxPTnp0algrSERiZDNCOTRPaG1lYnFxT2h1NmlFL3h1bG80Q0JoRFhoRzJaUXQ2ZlpYVnpCcG5VREFCSnlGV2d3SVE1UlhzYVNtc0NBd0VBQVNqQ3NBRklBUktBQXdSRkdHcVRkczRDb2dUbm1zNmJpVmdnMkdkUElOL2NjWjlUQnZnVklORXg2SGNwVi85aW1KNytIL09tQ1F5SGpHWXlwdU5acXpMVEZlZHhSb1doV1E2MGZMSWh1SWlBbXhVYThFV2pTNVRWaU9UVURTbzhpeStjVEFIUXAzL21vc21LNXdEclo5b3lnTkx5M3JtZDVnK0NndWpmZ3pGdm9ZKzR0a3hhVmZJZnM4WUViUS8wYUl4WHZCUGVWQk85WURsUldpYUpueFZhaDFNUHVYZ1psTjZ2ck5mSnAvUXdWemlkL3ZrQThHNzAzcC9icitTekZqa2JzYW9Jb1ZIYXdJLzZTRk5FRDl3NTFxV3g4b0F0TEhhdGRnb2t5TzM1VjVXV1VSS0huK2V6SmlxYzhxUjhYT0thaUJIczRuUnB0NmhvRVl4N1VFVDRrZGQxcVZpZnpQWkpESVhnMHFoTzQ3S1VHVDdvSkx2S2FXS0RnYURjbEplN3AzUVBQVDdzeDh4aDdNejZ1RmhtaDZTMi9tRmpoRnB6cnRmNXVuNVRQbnUzZy83TWZEaFpXbTNzMUMwTDJleDQwbGdhOE5yVkE4bUFsbGNrNVhBTUI4Zk0vMGJKdUQ3cGVlYzk3MUk0Wm5FRlI2OFk2ZlE5UWY0S2NINTJmclh2NDFWcndHL2JYUm90Q2hCaGNIQnNhV05oZEdsdmJsOXVZVzFsRWhsaGJtUnliMmxrZUM1dFpXUnBZVE11WkdWdGJ5NXRZV2x1R2dvS0JtOXlhV2RwYmhJQUdrNEtIbkJoWTJ0aFoyVmZZMlZ5ZEdsbWFXTmhkR1ZmYUdGemFGOWllWFJsY3hJc1QyaElZVGgxVm5aWWJpOUdWVlZ2WlV0WmMwUkdUWFk0ZFcxUU9WVlFabmRNY2xBNFVHcG5ObU5yU1QwYUZnb01ZMjl0Y0dGdWVWOXVZVzFsRWdaSGIyOW5iR1VhSUFvS2JXOWtaV3hmYm1GdFpSSVNjMlJyWDJkd2FHOXVaVFkwWDJGeWJUWTBHaDRLRVdGeVkyaHBkR1ZqZEhWeVpWOXVZVzFsRWdsaGNtMDJOQzEyT0dFYUh3b0xaR1YyYVdObFgyNWhiV1VTRUdWdGRXeGhkRzl5TmpSZllYSnROalFhSWdvTWNISnZaSFZqZEY5dVlXMWxFaEp6Wkd0ZlozQm9iMjVsTmpSZllYSnROalFhWndvS1luVnBiR1JmYVc1bWJ4SlpaMjl2WjJ4bEwzTmthMTluY0dodmJtVTJORjloY20wMk5DOWxiWFZzWVhSdmNqWTBYMkZ5YlRZME9qRXlMMU5GTVVJdU1qUXdNVEl5TGpBd05TOHhNVFF4T0RjNE5qcDFjMlZ5WkdWaWRXY3ZaR1YyTFd0bGVYTWFIZ29VZDJsa1pYWnBibVZmWTJSdFgzWmxjbk5wYjI0U0JqRTJMakV1TUJva0NoOXZaVzFmWTNKNWNIUnZYM05sWTNWeWFYUjVYM0JoZEdOb1gyeGxkbVZzRWdFd0dsQUtIRzlsYlY5amNubHdkRzlmWW5WcGJHUmZhVzVtYjNKdFlYUnBiMjRTTUU5RlRVTnllWEIwYnlCTVpYWmxiRE1nUTI5a1pTQXlNalU1TkNCTllYa2dNamdnTWpBeU1TQXhOam8xT1Rvd056SVVDQUVRQVNBQUtCQXdBRUFBU0FCUUFWZ0FZQUVTVEFwS0NpUUlBUklCTlJvTmQybGtaWFpwYm1WZmRHVnpkQ0lLTWpBeE5WOTBaV0Z5Y3lvQ1UwUVFBUm9nTXpReU1UTkdSalU1TlVWRk9EQTBNVE5FTURBd01EQXdNREF3TURBd01EQVlBU0Mva09xdkJqQVZPSmIwbkk4REdvQUNVRmJET3FobW9UUHVmUFVXbmt2YllWYzlNQTl1b1hLNytVazFYNFlnVlpmQUtGLzVNTmY1ZWVRTDZmYnMvci9NQ2tRUlU0NEFZVGlROGxXM3pWRGtkNFByZmRqaXVvNlR3M09OdElzTjE2eGRxSWV0OFRtblRKOVRKaGlMeHluaFFlSTgzK0hlamY4WWZzZkRNSU1hU2RYWjhkMWFHS0pzSmovSFNHM04yeVBnWGhuMGh5dlZaNENYWCtOT29iRVB3N1RoeXZCd2s2ZjV5SWprUmREZGVsRDYrdjRFSmdaY1AwZG1WRHFVeVhJSExTWkozZDVCQzczSjc2OXp0RmJLWTZkekdYWm1vQXFZUHN2b3VzLzkwZHFrRVJTeE14NWk2YmdhOWZTbFlxdEw4a29PRUp2SHR0WmZUbmxBR2J6WXlkOTVIZU4xZ2U5K3dNTEUrQlhDaUVvVUFBQUFBUUFBQUJRQUJBQVFNZWM2RmdBQUFBQT0iLCJjb250ZW50X2lkIjoiIiwicHJvdmlkZXIiOiJ3aWRldmluZV90ZXN0IiwiYWxsb3dlZF90cmFja190eXBlcyI6IlNEX0hEIn0=","signature":"TUWfUsikObcn9//l4Z3soXrK5BPC76AgDBDnu52sOMI=","signer":"widevine_test"}
